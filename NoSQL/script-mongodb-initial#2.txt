Tag Management
Page 1: Input Tag
// Create a new tag
db.tags.insertOne({
  name: "Enter tag name here",
  description: "Enter tag description here"
})

Page 2: Display Tags
// Fetch all tags
db.tags.find()

// Delete a project by ID
db.projects.deleteOne({ _id: ObjectId("projectID") })


Page 3: Edit Tag
// Update an existing tag
db.tags.updateOne({ _id: ObjectId("tagID") }, {
  $set: {
    name: "Updated tag name",
    description: "Updated tag description"
  }
})



Project Management
Page 1: Create Project
// Create a new project
db.projects.insertOne({
  name: "Enter project name here",
  goal: "Enter project goal here",
  number_of_employees: 0,
  priority: "High", // or "Medium", "Low"
  status: "Pending", // or "In Progress", "Completed"
  start_date: new Date(),
  end_date: new Date(),
  project_manager: ObjectId("employeeID"),
  project_team: [] // Add team members later
})


Page 2: Display Projects
// Fetch all projects
db.projects.find()

// Delete a tag by ID
db.tags.deleteOne({ _id: ObjectId("tagID") })


Page 3: Edit Project
// Update an existing project
db.projects.updateOne({ _id: ObjectId("projectID") }, {
  $set: {
    name: "Updated project name",
    goal: "Updated project goal",
    number_of_employees: 10, // or any number
    priority: "Medium", // or "High", "Low"
    status: "In Progress", // or "Pending", "Completed"
    start_date: new Date(),
    end_date: new Date(),
    project_manager: ObjectId("employeeID"),
    project_team: [] // Update team members later
  }
})

Employee Management
Page 1: Create Employee
// Create a new employee
db.employees.insertOne({
  first_name: "Enter first name here",
  last_name: "Enter last name here",
  email: "Enter email address here",
  phone_number: "Enter phone number here",
  address: "Enter address here",
  birth_date: new Date(),
  hire_date: new Date(),
  project_assignment: [ObjectId("projectID")], // Add more project IDs as needed
  employee_skills: [ObjectId("skillID")], // Add more skill IDs as needed
  team_task: [ObjectId("teamID")], // Add more team IDs as needed
  team_member: [ObjectId("teamID")], // Add more team IDs as needed
})

Page 2: Display Employees
// Fetch all employees
db.employees.find().project({
  _id: 1,
  first_name: 1,
  last_name: 1,
  email: 1,
  project_assignment: {
    $elemMatch: {
      name: 1
    }
  },
  team_task: {
    $elemMatch: {
      name: 1
    }
  },
  team_member: {
    $elemMatch: {
      name: 1
    }
  },
  employee_skills: {
    $elemMatch: {
      name: 1
    }
  }
})

// Delete an employee by ID
db.employees.deleteOne({ _id: ObjectId("employeeID") })


Page 3: Edit Employee
// Update an existing employee
db.employees.updateOne({ _id: ObjectId("employeeID") }, {
  $set: {
    first_name: "Updated first name",
    last_name: "Updated last name",
    email: "Updated email address",
    phone_number: "Updated phone number",
    address: "Updated address",
    birth_date: new Date(),
    hire_date: new Date(),
    project_assignment: [ObjectId("projectID")], // Update project assignments
    employee_skills: [ObjectId("skillID")], // Update employee skills
    team_task: [ObjectId("teamID")], // Update team tasks
    team_member: [ObjectId("teamID")], // Update team memberships
  }
})


Team Management
Page 1: Create Team
// Create a new team
db.teams.insertOne({
  team_name: "Enter team name here",
  team_lead_id: ObjectId("employeeID"), // ID of the team lead
  project: ObjectId("projectID"), // ID of the associated project (if any)
  skill_team_id: [ObjectId("skillID")], // IDs of team's skills
  members: [] // Add team members later
})

Page 1: Filter Employees by Skill
// Find employees with a specific skill tag
db.employees.find({
  employee_skills: {
    $elemMatch: {
      $ref: "Skills",
      $id: ObjectId("skillID") // ID of the skill tag
    }
  }
}).project({
  _id: 1,
  first_name: 1,
  last_name: 1,
  email: 1,
  project_assignment: {
    $elemMatch: {
      name: 1
    }
  },
  team_task: {
    $elemMatch: {
      name: 1
    }
  },
  team_member: {
    $elemMatch: {
      name: 1
    }
  },
  employee_skills: {
    $elemMatch: {
      name: 1
    }
  }
})

Page 2: Display Teams
// Fetch all teams
db.teams.find().project({
  _id: 1,
  team_name: 1,
  team_lead_id: 1, // Reference to employee document
  project: 1, // Reference to project document
  skill_team_id: {
    $elemMatch: {
      $ref: "Skills",
      name: 1
    }
  },
  members: {
    $elemMatch: {
      $ref: "Employees",
      first_name: 1,
      last_name: 1
    }
  }
})

Page 3: Edit Team
// Update an existing team
db.teams.updateOne({ _id: ObjectId("teamID") }, {
  $set: {
    team_name: "Updated team name",
    team_lead_id: ObjectId("employeeID"), // ID of the team lead
    project: ObjectId("projectID"), // ID of the associated project (if any)
    skill_team_id: [ObjectId("skillID")], // IDs of team's skills
    members: [] // Update team members later
  }
})

Team-Project Assignment
Page 1: Create Team-Project Assignment
// Assign a team to a project
db.projects.updateOne({ _id: ObjectId("projectID") }, {
  $set: {
    project_team: [ObjectId("teamID")] // ID of the team to assign
  }
})

Page 2: Display Team-Project Assignments
// Fetch all projects with assigned teams
db.projects.find().project({
  _id: 1,
  name: 1,
  project_team: {
    $elemMatch: {
      $ref: "Teams",
      team_name: 1,
      members: {
        $elemMatch: {
          $ref: "Employees",
          first_name: 1,
          last_name: 1
        }
      }
    }
  }
})






